import 'dart:async';
import 'package:flutter/material.dart';
import 'package:geocoding/geocoding.dart';
import 'package:geolocator/geolocator.dart';
import 'package:svpro/app_navigator.dart';
import 'package:url_launcher/url_launcher.dart';

class LocationService {

  static StreamSubscription<Position>? locationStream;
  static Position? positionStream;

  /// Xin quy·ªÅn v√† ki·ªÉm tra
  static Future<bool> _prepare() async {
    // B1: Ki·ªÉm tra GPS c√≥ b·∫≠t ch∆∞a
    final enabled = await Geolocator.isLocationServiceEnabled();
    if (!enabled) {
      await AppNavigator.showForcedActionDialog(
        title: "GPS ch∆∞a b·∫≠t",
        content: "Vui l√≤ng b·∫≠t GPS ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng ·ª©ng d·ª•ng.",
        confirmText: "ƒê√£ b·∫≠t",
        onConfirm: () {},
      );
      return false;
    }

    // B2: Ki·ªÉm tra quy·ªÅn
    LocationPermission permission = await Geolocator.checkPermission();

    if (permission == LocationPermission.denied) {
      // üëâ Hi·ªán popup t·ª± code c·ªßa b·∫°n ƒë·ªÉ gi·∫£i th√≠ch tr∆∞·ªõc
      await AppNavigator.showConfirmationDialog(
        title: "Quy·ªÅn v·ªã tr√≠",
        content:
        "·ª®ng d·ª•ng c·∫ßn quy·ªÅn truy c·∫≠p v·ªã tr√≠ ƒë·ªÉ hi·ªÉn th·ªã b·∫£n ƒë·ªì, ch·ªâ ƒë∆∞·ªùng v√† x√°c ƒë·ªãnh v·ªã tr√≠ ch√≠nh x√°c. "
            "Vui l√≤ng c·∫•p quy·ªÅn ƒë·ªÉ tr·∫£i nghi·ªám ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng.",
        confirmText: "ƒê·ªìng √Ω",
        cancelText: "H·ªßy",
        onConfirm: () async {

          permission = await Geolocator.requestPermission();

          if (permission == LocationPermission.denied) {
            AppNavigator.error("B·∫°n ch∆∞a c·∫•p quy·ªÅn v·ªã tr√≠!");
          }
        },
      );
    }

    if (permission == LocationPermission.deniedForever) {
      await AppNavigator.showForcedActionDialog(
        title: "Quy·ªÅn b·ªã ch·∫∑n",
        content:
        "B·∫°n ƒë√£ t·ª´ ch·ªëi quy·ªÅn v·ªã tr√≠ v√† ch·ªçn 'Kh√¥ng h·ªèi l·∫°i'. Vui l√≤ng v√†o C√†i ƒë·∫∑t ƒë·ªÉ c·∫•p quy·ªÅn th·ªß c√¥ng.",
        confirmText: "M·ªü c√†i ƒë·∫∑t",
        onConfirm: () {
          Geolocator.openAppSettings();
        },
      );
      return false;
    }

    return permission == LocationPermission.always ||
        permission == LocationPermission.whileInUse;
  }


  /// L·∫•y v·ªã tr√≠ hi·ªán t·∫°i
  static Future<Position?> getCurrentLocation() async {
    final ok = await _prepare();
    if (!ok) return null;

    try {
      return await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      );
    } catch (e) {
      debugPrint("error: $e");
      return null;
    }
  }

  /// B·∫Øt ƒë·∫ßu stream v·ªã tr√≠
  static Future<StreamSubscription<Position>?> startLocationStream(
      Function(Position) onLocation, {
        int distanceFilter = 10,
      }) async {
    final ok = await _prepare();
    if (!ok) null;

    final sub = Geolocator.getPositionStream(
      locationSettings: LocationSettings(
        accuracy: LocationAccuracy.best,
        distanceFilter: distanceFilter,
      ),
    ).listen(onLocation);
    return sub;
  }

  /// L·∫•y ƒë·ªãa ch·ªâ vƒÉn b·∫£n t·ª´ v·ªã tr√≠ hi·ªán t·∫°i
  static Future<String?> getCurrentAddress() async {
    final position = await getCurrentLocation();
    if (position == null) return null;

    try {
      List<Placemark> placemarks = await placemarkFromCoordinates(
        position.latitude,
        position.longitude,
      );

      if (placemarks.isNotEmpty) {
        final place = placemarks.first;

        //
        final address = [
          place.name,                // T√™n ƒë·ªãa ƒëi·ªÉm ho·∫∑c s·ªë nh√†
          place.street,              // ƒê∆∞·ªùng
          place.subLocality,         // Ph∆∞·ªùng/x√£
          place.locality,            // Th√†nh ph·ªë/huy·ªán
          place.administrativeArea,  // T·ªânh/th√†nh
          place.country,             // Qu·ªëc gia
        ].where((e) => e != null && e.isNotEmpty).join(", ");

        return address;
      }
    } catch (e) {
      debugPrint("error: $e");
    }
    return null;
  }


  /// L·∫•y GPS (lat, lng) t·ª´ ƒë·ªãa ch·ªâ vƒÉn b·∫£n
  static Future<Location?> getGpsFromAddress(String address) async {
    try {
      List<Location> locations = await locationFromAddress(address);
      if (locations.isNotEmpty) {
        return locations.first; // c√≥ latitude, longitude
      }
    } catch (e) {
      debugPrint("error: $e");
    }
    return null;
  }

  static String formatDistance(double lat1, double lng1, double lat2, double lng2) {
    final meters = Geolocator.distanceBetween(lat1, lng1, lat2, lng2);

    if (meters < 1000) {
      return "${meters.toStringAsFixed(0)}m";
    } else {
      final km = meters / 1000;
      return "${km.toStringAsFixed(1)}km";
    }
  }

  static Future<void> openMap(double lat, double lng) async {
    final googleUrl = Uri.parse("https://www.google.com/maps/search/?api=1&query=$lat,$lng");
    final appleUrl = Uri.parse("http://maps.apple.com/?q=$lat,$lng");

    if (await canLaunchUrl(googleUrl)) {
      await launchUrl(googleUrl, mode: LaunchMode.externalApplication);
    } else if (await canLaunchUrl(appleUrl)) {
      await launchUrl(appleUrl, mode: LaunchMode.externalApplication);
    } else {
      AppNavigator.warning("Kh√¥ng m·ªü ƒë∆∞·ª£c b·∫£n ƒë·ªì");
    }
  }
}
